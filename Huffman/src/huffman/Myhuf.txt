package huffman;

import java.io.Console;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Collections;

/**
 * This class contains methods which, when used together, perform the entire
 * Huffman Coding encoding and decoding process
 * 
 * @author Ishaan Ivaturi
 * @author Prince Rawal
 */
public class HuffmanCoding {
    /**
     * Writes a given string of 1's and 0's to the given file byte by byte and NOT
     * as characters of 1 and 0 which take up 8 bits each
     * 
     * @param filename  The file to write to (doesn't need to exist yet)
     * @param bitString The string of 1's and 0's to write to the file in bits
     */
    public static void writeBitString(String filename, String bitString) {
        byte[] bytes = new byte[bitString.length() / 8 + 1];
        int bytesIndex = 0, byteIndex = 0, currentByte = 0;

        // Pad the string with initial zeroes and then a one in order to bring
        // its length to a multiple of 8. When reading, the 1 signifies the
        // end of padding.
        int padding = 8 - (bitString.length() % 8);
        String pad = "";
        for (int i = 0; i < padding - 1; i++)
            pad = pad + "0";
        pad = pad + "1";
        bitString = pad + bitString;

        // For every bit, add it to the right spot in the corresponding byte,
        // and store bytes in the array when finished
        for (char c : bitString.toCharArray()) {
            if (c != '1' && c != '0') {
                System.out.println("Invalid characters in bitstring");
                System.exit(1);
            }

            if (c == '1')
                currentByte += 1 << (7 - byteIndex);
            byteIndex++;

            if (byteIndex == 8) {
                bytes[bytesIndex] = (byte) currentByte;
                bytesIndex++;
                currentByte = 0;
                byteIndex = 0;
            }
        }

        // Write the array of bytes to the provided file
        try {
            FileOutputStream out = new FileOutputStream(filename);
            out.write(bytes);
            out.close();
        } catch (Exception e) {
            System.err.println("Error when writing to file!");
        }
    }

    /**
     * Reads a given file byte by byte, and returns a string of 1's and 0's
     * representing the bits in the file
     * 
     * @param filename The encoded file to read from
     * @return String of 1's and 0's representing the bits in the file
     */
    public static String readBitString(String filename) {
        String bitString = "";

        try {
            FileInputStream in = new FileInputStream(filename);
            File file = new File(filename);

            byte bytes[] = new byte[(int) file.length()];
            in.read(bytes);
            in.close();

            // For each byte read, convert it to a binary string of length 8 and add it
            // to the bit string
            for (byte b : bytes) {
                bitString = bitString + String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0');
            }

            // Detect the first 1 signifying the end of padding, then remove the first few
            // characters, including the 1
            for (int i = 0; i < 8; i++) {
                if (bitString.charAt(i) == '1')
                    return bitString.substring(i + 1);
            }

            return bitString.substring(8);
        } catch (Exception e) {
            System.out.println("Error while reading file!");
            return "";
        }
    }

    /**
     * Reads a given text file character by character, and returns an arraylist of
     * CharFreq objects with frequency > 0, sorted by frequency
     * 
     * @param filename The text file to read from
     * @return Arraylist of CharFreq objects, sorted by frequency
     */
    public static ArrayList<CharFreq> makeSortedList(String filename) {
        StdIn.setFile(filename);
        final int NUM_ASCII_CHARS = 128;

        int[] freqs = new int[NUM_ASCII_CHARS];
        int strLen = 0;
        while (StdIn.hasNextChar()) {
            char c = StdIn.readChar();
            freqs[c]++;
            strLen++;
        }
    
        ArrayList<CharFreq> sortedList = new ArrayList<>();
        int lastChar = -1; // This is for the scenario where there is only one character.
        for (int i = 0; i < NUM_ASCII_CHARS; i++) {
            if (freqs[i] > 0) {
                lastChar = i;
                CharFreq charFreq = new CharFreq((char) i, (freqs[i] / (double)strLen));
                sortedList.add(charFreq);
            }
        }

        if(sortedList.size() == 1){
            CharFreq charFreq;
            if(lastChar == NUM_ASCII_CHARS-1)
                charFreq = new CharFreq((char)0, 0);
            else
                charFreq = new CharFreq((char)(lastChar+1), ((double) freqs[lastChar+1] / strLen));
            sortedList.add(charFreq);
        }

        Collections.sort(sortedList);
        return sortedList;
    }

    /**
     * Uses a given sorted arraylist of CharFreq objects to build a huffman coding
     * tree
     * 
     * @param sortedList The arraylist of CharFreq objects to build the tree from
     * @return A TreeNode representing the root of the huffman coding tree
     */
    public static TreeNode makeTree(ArrayList<CharFreq> sortedList) {
        if(sortedList.size() == 0){
            return null;
        }

        Queue<TreeNode> source = new Queue<>();
        for (CharFreq charFreq : sortedList) {
            TreeNode node = new TreeNode(charFreq, null, null);
            source.enqueue(node);
        }

        Queue<TreeNode> target = new Queue<>();
        while (!source.isEmpty() || target.size() != 1) {
            TreeNode node1 = smallerNode(source, target);
            TreeNode node2 = smallerNode(source, target);

            double prob1 = node1.getData().getProbOccurrence();
            double prob2 = node2.getData().getProbOccurrence();

            CharFreq combined = new CharFreq(null, prob1 + prob2);
            TreeNode parent = new TreeNode(combined, node1, node2);
            target.enqueue(parent);
        }

        return target.dequeue();
    }

    //compareTo that accounts for null character in charFreq
    private static TreeNode smallerNode(Queue<TreeNode> a, Queue<TreeNode> b) {
        if(a.isEmpty())
            return b.dequeue();
        if(b.isEmpty())
            return a.dequeue();
        TreeNode aNode = a.peek();
        TreeNode bNode = b.peek();
        boolean comp = aNode.getData().getProbOccurrence() > bNode.getData().getProbOccurrence();
        if(comp)
            return b.dequeue();
        else
            return a.dequeue();
    }

    /**
     * Uses a given huffman coding tree to create a string array of size 128, where
     * each index in the array contains that ASCII character's bitstring encoding.
     * Characters not present in the huffman coding tree should have their spots in
     * the array left null
     * 
     * @param root The root of the given huffman coding tree
     * @return Array of strings containing only 1's and 0's representing character
     *         encodings
     */
    public static String[] makeEncodings(TreeNode root) {
        String[] encodings = new String[128];
        getStringEncoding(root, encodings, new StringBuilder());
        return encodings;
    }

    private static void getStringEncoding(TreeNode node, String[] encodings, StringBuilder currBitString) {
        if(node == null) {
            return;
        }

        Character currChar = node.getData().getCharacter();
        if(currChar != null) {
            String bitString = currBitString.toString();
            encodings[(int)currChar] = bitString;
        }

        StringBuilder leftBitString = new StringBuilder(currBitString);
        leftBitString.append('0');
        StringBuilder rightBitString = new StringBuilder(currBitString);
        rightBitString.append('1');
        getStringEncoding(node.getLeft(), encodings, leftBitString);
        getStringEncoding(node.getRight(), encodings, rightBitString);
    }

    /**
     * Using a given string array of encodings, a given text file, and a file name
     * to encode into, this method makes use of the writeBitString method to write
     * the final encoding of 1's and 0's to the encoded file.
     * 
     * @param encodings   The array containing binary string encodings for each
     *                    ASCII character
     * @param textFile    The text file which is to be encoded
     * @param encodedFile The file name into which the text file is to be encoded
     */
    public static void encodeFromArray(String[] encodings, String textFile, String encodedFile) {
        StdIn.setFile(textFile);
        StringBuilder encoding = new StringBuilder();
        while (StdIn.hasNextChar()) {
            char c = StdIn.readChar();
            encoding.append(encodings[c]);
        }
        writeBitString(encodedFile, encoding.toString());
    }

    /**
     * Using a given encoded file name and a huffman coding tree, this method makes
     * use of the readBitString method to convert the file into a bit string, then
     * decodes the bit string using the tree, and writes it to a file.
     * 
     * @param encodedFile The file which contains the encoded text we want to decode
     * @param root        The root of your Huffman Coding tree
     * @param decodedFile The file which you want to decode into
     */
    public static void decode(String encodedFile, TreeNode root, String decodedFile) {
        StdOut.setFile(decodedFile);

        String encodedBitString = readBitString(encodedFile);
        
        for(int i = 0; i < encodedBitString.length();){
            TreeNode curr = root;
            while(curr.getLeft() != null || curr.getRight() != null){
                if(encodedBitString.charAt(i) == '0') curr = curr.getLeft();
                else curr = curr.getRight();
                i++;
            }
            char decoded = curr.getData().getCharacter();
            StdOut.print(decoded);
        }
    }
}